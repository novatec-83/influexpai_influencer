import * as either from 'fp-ts/lib/Either';
import * as option from 'fp-ts/lib/Option';
import * as t from 'io-ts';
declare type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
declare type ObjectOmit<T extends K, K> = Omit<T, keyof K>;
declare type ObjectDiff<O1 extends O2, O2> = ObjectOmit<O1, O2> & Partial<O2>;
declare type ObjectClean<T> = Pick<T, keyof T>;
import Option = option.Option;
import Either = either.Either;
import { defaultOAuthOptions, defaultStatusesHomeTimelineQuery } from './helpers';
export declare type RequestMethod = 'GET' | 'POST' | 'DELETE' | 'PATCH' | 'UPDATE';
export declare const User: t.InterfaceType<{
    id_str: t.StringType;
    screen_name: t.StringType;
    time_zone: t.NullType;
}, t.TypeOfProps<{
    id_str: t.StringType;
    screen_name: t.StringType;
    time_zone: t.NullType;
}>, t.OutputOfProps<{
    id_str: t.StringType;
    screen_name: t.StringType;
    time_zone: t.NullType;
}>, t.mixed>;
export declare const Tweet: t.InterfaceType<{
    id_str: t.StringType;
    created_at: t.StringType;
    user: t.InterfaceType<{
        id_str: t.StringType;
        screen_name: t.StringType;
        time_zone: t.NullType;
    }, t.TypeOfProps<{
        id_str: t.StringType;
        screen_name: t.StringType;
        time_zone: t.NullType;
    }>, t.OutputOfProps<{
        id_str: t.StringType;
        screen_name: t.StringType;
        time_zone: t.NullType;
    }>, t.mixed>;
    text: t.StringType;
}, t.TypeOfProps<{
    id_str: t.StringType;
    created_at: t.StringType;
    user: t.InterfaceType<{
        id_str: t.StringType;
        screen_name: t.StringType;
        time_zone: t.NullType;
    }, t.TypeOfProps<{
        id_str: t.StringType;
        screen_name: t.StringType;
        time_zone: t.NullType;
    }>, t.OutputOfProps<{
        id_str: t.StringType;
        screen_name: t.StringType;
        time_zone: t.NullType;
    }>, t.mixed>;
    text: t.StringType;
}>, t.OutputOfProps<{
    id_str: t.StringType;
    created_at: t.StringType;
    user: t.InterfaceType<{
        id_str: t.StringType;
        screen_name: t.StringType;
        time_zone: t.NullType;
    }, t.TypeOfProps<{
        id_str: t.StringType;
        screen_name: t.StringType;
        time_zone: t.NullType;
    }>, t.OutputOfProps<{
        id_str: t.StringType;
        screen_name: t.StringType;
        time_zone: t.NullType;
    }>, t.mixed>;
    text: t.StringType;
}>, t.mixed>;
export declare type TweetT = t.TypeOf<typeof Tweet>;
export declare const TwitterAPIErrorResponse: t.InterfaceType<{
    errors: t.ArrayType<t.InterfaceType<{
        code: t.NumberType;
        message: t.StringType;
    }, t.TypeOfProps<{
        code: t.NumberType;
        message: t.StringType;
    }>, t.OutputOfProps<{
        code: t.NumberType;
        message: t.StringType;
    }>, t.mixed>, t.TypeOfProps<{
        code: t.NumberType;
        message: t.StringType;
    }>[], t.OutputOfProps<{
        code: t.NumberType;
        message: t.StringType;
    }>[], t.mixed>;
}, t.TypeOfProps<{
    errors: t.ArrayType<t.InterfaceType<{
        code: t.NumberType;
        message: t.StringType;
    }, t.TypeOfProps<{
        code: t.NumberType;
        message: t.StringType;
    }>, t.OutputOfProps<{
        code: t.NumberType;
        message: t.StringType;
    }>, t.mixed>, t.TypeOfProps<{
        code: t.NumberType;
        message: t.StringType;
    }>[], t.OutputOfProps<{
        code: t.NumberType;
        message: t.StringType;
    }>[], t.mixed>;
}>, t.OutputOfProps<{
    errors: t.ArrayType<t.InterfaceType<{
        code: t.NumberType;
        message: t.StringType;
    }, t.TypeOfProps<{
        code: t.NumberType;
        message: t.StringType;
    }>, t.OutputOfProps<{
        code: t.NumberType;
        message: t.StringType;
    }>, t.mixed>, t.TypeOfProps<{
        code: t.NumberType;
        message: t.StringType;
    }>[], t.OutputOfProps<{
        code: t.NumberType;
        message: t.StringType;
    }>[], t.mixed>;
}>, t.mixed>;
export declare type TwitterAPIErrorResponseT = t.TypeOf<typeof TwitterAPIErrorResponse>;
export declare const TwitterAPIRequestTokenResponse: t.InterfaceType<{
    oauth_token: t.StringType;
    oauth_token_secret: t.StringType;
    oauth_callback_confirmed: t.StringType;
}, t.TypeOfProps<{
    oauth_token: t.StringType;
    oauth_token_secret: t.StringType;
    oauth_callback_confirmed: t.StringType;
}>, t.OutputOfProps<{
    oauth_token: t.StringType;
    oauth_token_secret: t.StringType;
    oauth_callback_confirmed: t.StringType;
}>, t.mixed>;
export declare type TwitterAPIRequestTokenResponseT = t.TypeOf<typeof TwitterAPIRequestTokenResponse>;
export declare const TwitterAPIAccessTokenResponse: t.InterfaceType<{
    oauth_token: t.StringType;
    oauth_token_secret: t.StringType;
    user_id: t.StringType;
    screen_name: t.StringType;
}, t.TypeOfProps<{
    oauth_token: t.StringType;
    oauth_token_secret: t.StringType;
    user_id: t.StringType;
    screen_name: t.StringType;
}>, t.OutputOfProps<{
    oauth_token: t.StringType;
    oauth_token_secret: t.StringType;
    user_id: t.StringType;
    screen_name: t.StringType;
}>, t.mixed>;
export declare type TwitterAPIAccessTokenResponseT = t.TypeOf<typeof TwitterAPIAccessTokenResponse>;
export declare const TwitterAPITimelineResponse: t.ArrayType<t.InterfaceType<{
    id_str: t.StringType;
    created_at: t.StringType;
    user: t.InterfaceType<{
        id_str: t.StringType;
        screen_name: t.StringType;
        time_zone: t.NullType;
    }, t.TypeOfProps<{
        id_str: t.StringType;
        screen_name: t.StringType;
        time_zone: t.NullType;
    }>, t.OutputOfProps<{
        id_str: t.StringType;
        screen_name: t.StringType;
        time_zone: t.NullType;
    }>, t.mixed>;
    text: t.StringType;
}, t.TypeOfProps<{
    id_str: t.StringType;
    created_at: t.StringType;
    user: t.InterfaceType<{
        id_str: t.StringType;
        screen_name: t.StringType;
        time_zone: t.NullType;
    }, t.TypeOfProps<{
        id_str: t.StringType;
        screen_name: t.StringType;
        time_zone: t.NullType;
    }>, t.OutputOfProps<{
        id_str: t.StringType;
        screen_name: t.StringType;
        time_zone: t.NullType;
    }>, t.mixed>;
    text: t.StringType;
}>, t.OutputOfProps<{
    id_str: t.StringType;
    created_at: t.StringType;
    user: t.InterfaceType<{
        id_str: t.StringType;
        screen_name: t.StringType;
        time_zone: t.NullType;
    }, t.TypeOfProps<{
        id_str: t.StringType;
        screen_name: t.StringType;
        time_zone: t.NullType;
    }>, t.OutputOfProps<{
        id_str: t.StringType;
        screen_name: t.StringType;
        time_zone: t.NullType;
    }>, t.mixed>;
    text: t.StringType;
}>, t.mixed>, t.TypeOfProps<{
    id_str: t.StringType;
    created_at: t.StringType;
    user: t.InterfaceType<{
        id_str: t.StringType;
        screen_name: t.StringType;
        time_zone: t.NullType;
    }, t.TypeOfProps<{
        id_str: t.StringType;
        screen_name: t.StringType;
        time_zone: t.NullType;
    }>, t.OutputOfProps<{
        id_str: t.StringType;
        screen_name: t.StringType;
        time_zone: t.NullType;
    }>, t.mixed>;
    text: t.StringType;
}>[], t.OutputOfProps<{
    id_str: t.StringType;
    created_at: t.StringType;
    user: t.InterfaceType<{
        id_str: t.StringType;
        screen_name: t.StringType;
        time_zone: t.NullType;
    }, t.TypeOfProps<{
        id_str: t.StringType;
        screen_name: t.StringType;
        time_zone: t.NullType;
    }>, t.OutputOfProps<{
        id_str: t.StringType;
        screen_name: t.StringType;
        time_zone: t.NullType;
    }>, t.mixed>;
    text: t.StringType;
}>[], t.mixed>;
export declare type TwitterAPITimelineResponseT = t.TypeOf<typeof TwitterAPITimelineResponse>;
export declare const TwitterAPIAccountVerifyCredentials: t.InterfaceType<{
    id_str: t.StringType;
    screen_name: t.StringType;
    time_zone: t.NullType;
}, t.TypeOfProps<{
    id_str: t.StringType;
    screen_name: t.StringType;
    time_zone: t.NullType;
}>, t.OutputOfProps<{
    id_str: t.StringType;
    screen_name: t.StringType;
    time_zone: t.NullType;
}>, t.mixed>;
export declare type TwitterAPIAccountVerifyCredentialsT = t.TypeOf<typeof TwitterAPIAccountVerifyCredentials>;
export declare const TwitterAPIAccountSettings: t.InterfaceType<{
    time_zone: t.InterfaceType<{
        name: t.StringType;
        tzinfo_name: t.StringType;
        utc_offset: t.NumberType;
    }, t.TypeOfProps<{
        name: t.StringType;
        tzinfo_name: t.StringType;
        utc_offset: t.NumberType;
    }>, t.OutputOfProps<{
        name: t.StringType;
        tzinfo_name: t.StringType;
        utc_offset: t.NumberType;
    }>, t.mixed>;
}, t.TypeOfProps<{
    time_zone: t.InterfaceType<{
        name: t.StringType;
        tzinfo_name: t.StringType;
        utc_offset: t.NumberType;
    }, t.TypeOfProps<{
        name: t.StringType;
        tzinfo_name: t.StringType;
        utc_offset: t.NumberType;
    }>, t.OutputOfProps<{
        name: t.StringType;
        tzinfo_name: t.StringType;
        utc_offset: t.NumberType;
    }>, t.mixed>;
}>, t.OutputOfProps<{
    time_zone: t.InterfaceType<{
        name: t.StringType;
        tzinfo_name: t.StringType;
        utc_offset: t.NumberType;
    }, t.TypeOfProps<{
        name: t.StringType;
        tzinfo_name: t.StringType;
        utc_offset: t.NumberType;
    }>, t.OutputOfProps<{
        name: t.StringType;
        tzinfo_name: t.StringType;
        utc_offset: t.NumberType;
    }>, t.mixed>;
}>, t.mixed>;
export declare type TwitterAPIAccountSettingsT = t.TypeOf<typeof TwitterAPIAccountSettings>;
export declare const ErrorResponse: import("unionize").Unionized<{
    JavaScriptError: {
        error: Error;
    };
    APIErrorResponse: {
        apiErrorResponse: t.TypeOfProps<{
            errors: t.ArrayType<t.InterfaceType<{
                code: t.NumberType;
                message: t.StringType;
            }, t.TypeOfProps<{
                code: t.NumberType;
                message: t.StringType;
            }>, t.OutputOfProps<{
                code: t.NumberType;
                message: t.StringType;
            }>, t.mixed>, t.TypeOfProps<{
                code: t.NumberType;
                message: t.StringType;
            }>[], t.OutputOfProps<{
                code: t.NumberType;
                message: t.StringType;
            }>[], t.mixed>;
        }>;
    };
    DecodeError: {
        decodeError: ({
            tag: "ValidationErrors";
        } & {
            validationErrors: t.ValidationError[];
        }) | ({
            tag: "ParsingError";
        } & {
            input: string;
            errorMessage: string;
        });
    };
}, import("unionize").MultiValueVariants<{
    JavaScriptError: {
        error: Error;
    };
    APIErrorResponse: {
        apiErrorResponse: t.TypeOfProps<{
            errors: t.ArrayType<t.InterfaceType<{
                code: t.NumberType;
                message: t.StringType;
            }, t.TypeOfProps<{
                code: t.NumberType;
                message: t.StringType;
            }>, t.OutputOfProps<{
                code: t.NumberType;
                message: t.StringType;
            }>, t.mixed>, t.TypeOfProps<{
                code: t.NumberType;
                message: t.StringType;
            }>[], t.OutputOfProps<{
                code: t.NumberType;
                message: t.StringType;
            }>[], t.mixed>;
        }>;
    };
    DecodeError: {
        decodeError: ({
            tag: "ValidationErrors";
        } & {
            validationErrors: t.ValidationError[];
        }) | ({
            tag: "ParsingError";
        } & {
            input: string;
            errorMessage: string;
        });
    };
}, "tag">>;
export declare type ErrorResponse = typeof ErrorResponse._Union;
export declare type Response<T> = Either<ErrorResponse, T>;
export declare type RequestTokenResponse = Response<TwitterAPIRequestTokenResponseT>;
export declare type AccessTokenResponse = Response<TwitterAPIAccessTokenResponseT>;
export declare type TimelineResponse = Response<TwitterAPITimelineResponseT>;
export declare type AccountVerifyCredentialsResponse = Response<TwitterAPIAccountVerifyCredentialsT>;
export declare type AccountSettingsResponse = Response<TwitterAPIAccountSettingsT>;
export declare type OAuthOptions = {
    consumerKey: string;
    consumerSecret: string;
    callback: Option<string>;
    token: Option<string>;
    tokenSecret: Option<string>;
    verifier: Option<string>;
};
export declare type OAuthOptionsInput = ObjectClean<ObjectDiff<OAuthOptions, typeof defaultOAuthOptions>>;
export declare const StatusesHomeTimelineQuery: t.InterfaceType<{
    count: t.Type<option.Option<number>, number | undefined, t.mixed>;
    max_id: t.Type<option.Option<string>, string | undefined, t.mixed>;
}, t.TypeOfProps<{
    count: t.Type<option.Option<number>, number | undefined, t.mixed>;
    max_id: t.Type<option.Option<string>, string | undefined, t.mixed>;
}>, t.OutputOfProps<{
    count: t.Type<option.Option<number>, number | undefined, t.mixed>;
    max_id: t.Type<option.Option<string>, string | undefined, t.mixed>;
}>, t.mixed>;
export declare type StatusesHomeTimelineQueryT = t.TypeOf<typeof StatusesHomeTimelineQuery>;
export declare type StatusesHomeTimelineQueryInput = ObjectClean<ObjectDiff<StatusesHomeTimelineQueryT, typeof defaultStatusesHomeTimelineQuery>>;
export declare type OAuthAuthenticateEndpointQuery = {
    oauth_token: string;
};
export {};
