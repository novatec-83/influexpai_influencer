import * as either from 'fp-ts/lib/Either';
import { ValidationError, TypeOfProps, ArrayType, InterfaceType, NumberType, StringType } from 'io-ts';
import { OAuthOptions, StatusesHomeTimelineQueryT } from './types';
export declare const createErrorResponse: <T>(errorResponse: ({
    tag: "JavaScriptError";
} & {
    error: Error;
}) | ({
    tag: "APIErrorResponse";
} & {
    apiErrorResponse: TypeOfProps<{
        errors: ArrayType<InterfaceType<{
            code: NumberType;
            message: StringType;
        }, TypeOfProps<{
            code: NumberType;
            message: StringType;
        }>, import("io-ts").OutputOfProps<{
            code: NumberType;
            message: StringType;
        }>, import("io-ts").mixed>, TypeOfProps<{
            code: NumberType;
            message: StringType;
        }>[], import("io-ts").OutputOfProps<{
            code: NumberType;
            message: StringType;
        }>[], import("io-ts").mixed>;
    }>;
}) | ({
    tag: "DecodeError";
} & {
    decodeError: ({
        tag: "ValidationErrors";
    } & {
        validationErrors: ValidationError[];
    }) | ({
        tag: "ParsingError";
    } & {
        input: string;
        errorMessage: string;
    });
})) => either.Either<({
    tag: "JavaScriptError";
} & {
    error: Error;
}) | ({
    tag: "APIErrorResponse";
} & {
    apiErrorResponse: TypeOfProps<{
        errors: ArrayType<InterfaceType<{
            code: NumberType;
            message: StringType;
        }, TypeOfProps<{
            code: NumberType;
            message: StringType;
        }>, import("io-ts").OutputOfProps<{
            code: NumberType;
            message: StringType;
        }>, import("io-ts").mixed>, TypeOfProps<{
            code: NumberType;
            message: StringType;
        }>[], import("io-ts").OutputOfProps<{
            code: NumberType;
            message: StringType;
        }>[], import("io-ts").mixed>;
    }>;
}) | ({
    tag: "DecodeError";
} & {
    decodeError: ({
        tag: "ValidationErrors";
    } & {
        validationErrors: ValidationError[];
    }) | ({
        tag: "ParsingError";
    } & {
        input: string;
        errorMessage: string;
    });
}), T>;
export declare const typecheck: <A>(a: A) => A;
export declare const defaultOAuthOptions: Pick<OAuthOptions, 'callback' | 'verifier' | 'token' | 'tokenSecret'>;
export declare const defaultStatusesHomeTimelineQuery: Pick<StatusesHomeTimelineQueryT, 'count' | 'max_id'>;
