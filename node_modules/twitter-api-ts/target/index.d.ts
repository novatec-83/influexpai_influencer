import * as either from 'fp-ts/lib/Either';
import * as task from 'fp-ts/lib/Task';
import * as fetch from 'node-fetch';
import Either = either.Either;
import Task = task.Task;
import { ENDPOINTS } from './constants';
import { AccessTokenResponse, AccountVerifyCredentialsResponse, ErrorResponse, OAuthOptionsInput, RequestMethod, RequestTokenResponse, StatusesHomeTimelineQueryInput, TimelineResponse, AccountSettingsResponse } from './types';
export declare type fetchFromTwitter = (args: {
    oAuth: OAuthOptionsInput;
    endpointPath: ENDPOINTS;
    method: RequestMethod;
    query: {};
}) => Task<Either<ErrorResponse, fetch.Response>>;
export declare const fetchFromTwitter: fetchFromTwitter;
export declare type getRequestToken = (args: {
    oAuth: OAuthOptionsInput;
}) => Task<RequestTokenResponse>;
export declare const getRequestToken: getRequestToken;
export declare type getAccessToken = (args: {
    oAuth: OAuthOptionsInput;
}) => Task<AccessTokenResponse>;
export declare const getAccessToken: getAccessToken;
export declare type fetchHomeTimeline = (args: {
    oAuth: OAuthOptionsInput;
    query: StatusesHomeTimelineQueryInput;
}) => Task<TimelineResponse>;
export declare const fetchHomeTimeline: fetchHomeTimeline;
export declare type fetchAccountVerifyCredentials = (args: {
    oAuth: OAuthOptionsInput;
}) => Task<AccountVerifyCredentialsResponse>;
export declare const fetchAccountVerifyCredentials: fetchAccountVerifyCredentials;
export declare type fetchAccountSettings = (args: {
    oAuth: OAuthOptionsInput;
}) => Task<AccountSettingsResponse>;
export declare const fetchAccountSettings: fetchAccountSettings;
