import { Component, Inject, PLATFORM_ID, NgModule } from '@angular/core';
import { isPlatformBrowser, CommonModule } from '@angular/common';
import 'rxjs/add/observable/interval';
import { FormsModule } from '@angular/forms';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class RecaptchaComponent {
    /**
     * @param {?} platformId
     */
    constructor(platformId) {
        this.platformId = platformId;
        this.recaptchaString = '';
        this.enterText = '';
        this.imagesList = [
            "url('https://storage.reviewsai.com/images/1.png')",
            "url('https://storage.reviewsai.com/images/2.png')",
            "url('https://storage.reviewsai.com/images/3.png')",
            "url('https://storage.reviewsai.com/images/4.png')",
            "url('https://storage.reviewsai.com/images/5.png')",
            "url('https://storage.reviewsai.com/images/6.png')",
            "url('https://storage.reviewsai.com/images/7.png')",
            "url('https://storage.reviewsai.com/images/8.png')",
            "url('https://storage.reviewsai.com/images/9.png')",
            "url('https://storage.reviewsai.com/images/10.png')",
            "url('https://storage.reviewsai.com/images/11.png')",
            "url('https://storage.reviewsai.com/images/12.png')",
            "url('https://storage.reviewsai.com/images/13.png')",
            "url('https://storage.reviewsai.com/images/14.png')",
            "url('https://storage.reviewsai.com/images/15.png')",
            "url('https://storage.reviewsai.com/images/16.png')",
            "url('https://storage.reviewsai.com/images/17.png')",
            "url('https://storage.reviewsai.com/images/18.png')",
            "url('https://storage.reviewsai.com/images/19.png')",
            "url('https://storage.reviewsai.com/images/20.png')",
            "url('https://storage.reviewsai.com/images/21.png')",
            "url('https://storage.reviewsai.com/images/22.png')",
            "url('https://storage.reviewsai.com/images/23.png')",
            "url('https://storage.reviewsai.com/images/24.png')",
            "url('https://storage.reviewsai.com/images/25.png')"
        ];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (isPlatformBrowser(this.platformId)) {
            this.reset();
            // Observable.interval(5000).subscribe(() => {
            //   this.reset();
            // });
        }
    }
    /**
     * @return {?}
     */
    makeid() {
        let /** @type {?} */ text = '';
        const /** @type {?} */ possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
        for (let /** @type {?} */ i = 0; i < 5; i++) {
            text += possible.charAt(Math.floor(Math.random() * possible.length));
        }
        return text;
    }
    /**
     * @return {?}
     */
    reset() {
        this.recaptchaString = this.makeid();
        this.enterText = '';
        let /** @type {?} */ elementList = document.getElementsByClassName('text-wrapper');
        let /** @type {?} */ iterateList = [].slice.call(elementList);
        for (let /** @type {?} */ element of iterateList) {
            element['style'].backgroundImage = this.imagesList[Math.floor(Math.random() * this.imagesList.length)];
        }
        return this.recaptchaString;
    }
    /**
     * @return {?}
     */
    getResponse() {
        if (this.recaptchaString === this.enterText) {
            this.reset();
            return true;
        }
        else {
            this.reset();
            return false;
        }
    }
}
RecaptchaComponent.decorators = [
    { type: Component, args: [{
                selector: 'blackgeeks-recaptcha',
                template: `<div class="recaptcha-wrap">
  <div>
    <p class="text-wrapper">{{recaptchaString}}</p>
    <i class="refresh-icon" (click)="reset()"></i>
  </div>
  <div>
    <input type="text" [(ngModel)]="enterText" placeholder="Enter Above Text">
  </div>
</div>
`,
                styles: [`@import url(https://fonts.googleapis.com/css?family=Caveat+Brush);.recaptcha-wrap{width:250px;background-color:#ebebec;border-radius:5px;-webkit-box-shadow:2px 2px 5px #888;box-shadow:2px 2px 5px #888;display:table-cell}.recaptcha-wrap p{width:50%;font-family:'Caveat Brush',cursive;margin:5px 0 0 5px;background:center/cover no-repeat #fff;border-radius:5px;text-align:center;padding:10px 20px;color:#80807f;font-size:35px;font-weight:900;display:inline-block;letter-spacing:2px;cursor:not-allowed;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;border:1px solid #d3d3d3;height:100%}.recaptcha-wrap i:before{content:'ðŸ—˜';border:2px outset #5bc0de;background-color:#5bc0de;border-radius:5px;color:#fff;font-size:35px;font-weight:700;cursor:pointer;font-style:normal;display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;margin-top:5px;padding:4px 10px;width:15%}.recaptcha-wrap input[type=text]{display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;margin:5px;padding:5px 10px;width:58%;font-size:15px;color:#000;text-align:center;border-radius:5px}`]
            },] },
];
/** @nocollapse */
RecaptchaComponent.ctorParameters = () => [
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class BlackgeeksRecaptchaModule {
}
BlackgeeksRecaptchaModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule
                ],
                declarations: [
                    RecaptchaComponent
                ],
                exports: [
                    RecaptchaComponent
                ],
                providers: []
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */

export { BlackgeeksRecaptchaModule, RecaptchaComponent };
//# sourceMappingURL=recaptcha-blackgeeks.js.map
