"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const qsLib = require("qs");
const urlLib = require("url");
const oauth_1 = require("request/lib/oauth");
const oauth = new oauth_1.OAuth({
    emit: (eventType, ...args) => {
        if (eventType === 'error') {
            throw new Error(`request library emitted an error event with args: ${args}`);
        }
        return true;
    },
});
exports.getOAuthAuthorizationHeader = ({ oAuth, url, method, queryParams, formParams, }) => {
    const oauthOptions = Object.assign({}, (oAuth.callback !== undefined
        ? { callback: oAuth.callback }
        : {}), { consumer_key: oAuth.consumerKey, consumer_secret: oAuth.consumerSecret }, (oAuth.token !== undefined
        ? { token: oAuth.token }
        : {}), (oAuth.tokenSecret !== undefined
        ? { token_secret: oAuth.tokenSecret }
        : {}), (oAuth.verifier !== undefined
        ? { verifier: oAuth.verifier }
        : {}));
    const parsedUrl = urlLib.parse(url);
    const formParamsStr = qsLib.stringify(formParams);
    const queryParamsStr = qsLib.stringify(queryParams);
    const oauthParams = oauth.buildParams(oauthOptions, parsedUrl, method, queryParamsStr, formParamsStr, qsLib);
    const oauthParamsWithBodyHash = Object.assign({}, oauthParams, (oauthOptions.body_hash !== undefined && oauthOptions.body_hash
        ? { body_hash: oauth.buildBodyHash(oauthParams, ''), }
        : {}));
    const authScheme = 'OAuth';
    const headerParamsStr = oauth.concatParams(oauthParamsWithBodyHash, ',', '"');
    const authorizationHeader = `${authScheme} ${headerParamsStr}`;
    return authorizationHeader;
};
//# sourceMappingURL=index.js.map