"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
function unionize(record, tagProp, valProp) {
    if (tagProp === void 0) { tagProp = 'tag'; }
    var creators = {};
    var _loop_1 = function (tag) {
        creators[tag] = function (value) {
            return valProp
                ? (_a = {}, _a[tagProp] = tag, _a[valProp] = value, _a) : __assign({}, value, (_b = {}, _b[tagProp] = tag, _b));
            var _a, _b;
        };
    };
    for (var tag in record) {
        _loop_1(tag);
    }
    var is = {};
    var _loop_2 = function (tag) {
        is[tag] = (function (variant) { return variant[tagProp] === tag; });
    };
    for (var tag in record) {
        _loop_2(tag);
    }
    var as = {};
    var _loop_3 = function (expectedTag) {
        as[expectedTag] = match((_a = {},
            _a[expectedTag] = function (x) { return x; },
            _a), function (actualTag) {
            throw new Error("Attempted to cast " + actualTag + " as " + expectedTag);
        });
        var _a;
    };
    for (var expectedTag in record) {
        _loop_3(expectedTag);
    }
    function match(cases, fallback) {
        if (fallback === void 0) { fallback = function (tag) { return undefined; }; }
        return function (variant) {
            var k = variant[tagProp];
            return k in cases
                ? cases[k](valProp ? variant[valProp] : variant)
                : fallback(k);
        };
    }
    return Object.assign({
        is: is,
        as: as,
        match: match,
        _Record: record,
    }, creators);
}
exports.unionize = unionize;
/**
 * Creates a pseudo-witness of a given type. That is, it pretends to return a value of
 * type `T` for any `T`, but it's really just returning `undefined`. This white lie
 * allows convenient expression of the value types in the record you pass to `unionize`.
 */
exports.ofType = function () { return undefined; };
exports.default = unionize;
//# sourceMappingURL=index.js.map